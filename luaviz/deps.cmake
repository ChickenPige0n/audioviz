include(FetchContent)

if(WIN32)
	if(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|AMD64")
		# usual place that lua is installed (via winget or other method)
		set(LUA_PATH "$ENV{LocalAppData}/Programs/Lua")
		if(NOT IS_DIRECTORY "${LUA_PATH}")
			message(FATAL_ERROR "lua not installed!")
			# we can add an option to build lua from source later on
		endif()

		set(LUA_LIB_NAME lua54) # this will need to be updated once lua 5.5 releases
		find_library(LUA_LIB ${LUA_LIB_NAME} PATHS "${LUA_PATH}/lib" REQUIRED)
		find_file(LUA_HEADER "lua.h" PATHS "${LUA_PATH}/include" REQUIRED)

		target_include_directories(luaviz PUBLIC ${LUA_PATH}/include)
		target_link_directories(luaviz PUBLIC ${LUA_PATH}/lib)
		target_link_libraries(luaviz PUBLIC ${LUA_LIB_NAME})
	else()
		message("other architecture detected, fetching lua source...")
		set(LUA_ENABLE_SHARED OFF)
		set(LUA_ENABLE_TESTING OFF)
		set(LUA_BUILD_BINARY OFF)
		set(LUA_BUILD_COMPILER OFF)
		FetchContent_Declare(lua URL https://github.com/walterschell/Lua/archive/refs/heads/master.zip)
		FetchContent_MakeAvailable(lua)
		target_link_libraries(luaviz PUBLIC Lua::Library)
	endif()
else()
	# for cross-distro compatibility since lua doesn't provide cmake support
	find_package(PkgConfig REQUIRED)
	pkg_search_module(LUA REQUIRED lua)
	if(NOT LUA_FOUND)
		message(FATAL_ERROR "lua not found! (pkg-config could not find it)")
	endif()
	message(STATUS "Found Lua ${LUA_VERSION}!")
	include_directories(${LUA_INCLUDE_DIRS})
	target_link_libraries(luaviz PUBLIC ${LUA_LIBRARIES})
endif()

FetchContent_Declare(sol2 URL https://github.com/ThePhD/sol2/archive/main.zip)
FetchContent_MakeAvailable(sol2)
target_link_libraries(luaviz PUBLIC sol2)
